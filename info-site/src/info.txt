# react-infosite
import React, { Component } from 'react'

class App extends Component {
    constructor() {
        super()
    }

    {/* Javascript functions can be written here */}

    render() {
        return (
            <div className="App">
            Hello World!
            </div>
        )
    }
}

export default App

With the above import statement, we are importing React and Component from the React library, which allows us to create a class component. If you are wondering why we have to wrap Component into curly brackets and not React, this is due to the way they are exported from the react module. Default exports are imported without curly brackets; everything else must be wrapped in curly brackets. 
Secondly, we are declaring the class component, App. We do this by extending the React class Component, which we imported at the top of the file. In doing this, we are essentially “Reactifying” our App component by giving it all of the fun methods and properties every React component should have. One thing to notice is that React components, like all classes and factory functions, should always be declared with a capital letter at the beginning (PascalCase).
You will usually see developers passing props as an argument to the constructor and also to the super() call, which must be called in any React constructor. 
{/* Some logic we haven't yet talked about. */}
In React, you write comments within curly brackets and /* */

The most unfamiliar code is likely the render() function, which returns something that looks like HTML, but is actually JSX. JSX is an HTML-like syntax that is “transpiled” (or converted) into JavaScript so a browser is able to process it. One of the primary characteristics and features of React is the ability to combine JavaScript and JSX. One thing you should know about JSX is that you can’t use some JavaScript protected words as html attributes anymore, such as class, onchange, or for. Instead of class you will need to use className, instead of onchange you write onChange, and instead of for, you must use … wait for it … htmlFor. All attributes in JSX are written in camelCase and some have their names changed completely to avoid the transpiler getting too confused about whether you’re assigning a label for an input, or instantiating a for loop. You should be fairly familiar with the camelCase naming convention from the naming of variables in JavaScript.

The render() function you see is the most used React “lifecycle” function
The only thing you should know for now is that every React class component needs a render function, which returns one top-level JSX element. When you want to return elements nested within one another, they need to be wrapped in a single parent element.
// BAD - will throw an error!
render() {
    return (
        <h1>Hello world</h1>
        <h2>Welcome to my React page!</h2>
    )
}

// GOOD
render() {
    return (
        <div>
            <h1>Hello world</h1>
            <h2>Welcome to my React page!</h2>
        </div>
    )
}
Finally, to be able to reuse this App component we created in other files of our project, we have to export the component. In our example, we export the component as the file’s default export:

export default App;
If you have multiple components in one file, you could export each component separately by adding the export keyword before the declaration of the component, or you could export them all at once using this syntax:

export { ComponentA, ComponentB, ComponentC };
However, when you import them, they will each need to be wrapped in curly braces. If you export a component as a default, you can import it without the curly braces. If you export multiple components, you have to import them inside of curly brackets.
Using class components is one of two ways of defining components in React. The other, more modern, approach is to define the component as a function (like a factory function).

A basic functional component looks something like this:

import React from 'react';

function App() {
  return <div className="App">Hello World!</div>;
}

// OR (arrow-function syntax)

const App = () => {
  return <div className="App">Hello World!</div>;
};

// OR (implicit return)

const App = () => <div className="App">Hello World!</div>;

export default App;

npx create-react-app my-first-react-app in your terminal, cd into the project by typing cd my-first-react-app, and then open it in your text editor of choice. If you want, you can view the project in the browser via the command npm start.

two of the most important files create-react-app includes for you are index.js and App.js. index.js is the “entry point” of your application by default.
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
In short, this line of code tells React to render the App component into the DOM, and more specifically, into the element with the id “root”. Every create-react-app project has a root div, which is visible in the index.html file in your public directory. If you decide to name your main application component something other than App.js, make sure to change its name in index.js as well.


React Developer Tools is an extension to the browser developer tools which allows you to inspect React components that build the page. It helps you to check and edit the React component tree as well as props, state, and hooks for each component